---
title: Capsule 2
---

{{< include ../_extensions/r-wasm/live/_knitr.qmd >}}

```{r}
#| label: setup
#| echo: false
library(checkdown)
```

## Objectifs de la capsule

À la fin de cette capsule, vous serez en mesure de:

1. Assigner une valeur à une variable.
2. Nommer une variable de façon efficace.
3. Connaître les principales classes de variables.
4. Convertir une donnée d'une classe de variable à une autre.
5. Savoir qu'il existe d'autres classes de variables.

## Capsule vidéo

{{< video https://youtu.be/10aSWfg_lIE >}}

## Exercices

::: {.callout-info}

Veuillez noter qu'il est possible d'avoir plus d'une bonne réponse par question. Vous pouvez reprendre chaque exercice grâce aux boutons "Start Over" ou "Try Again" Le bouton "hint" est là pour être utilisé!

:::

### Classes de variables

::: {.callout-note appearance="simple" icon=false .question}

```{r }
#| label: question1
#| echo: false
#| results: "asis"
check_question(
  c("'banane'", "'3.1415'"),
  options = c("12.34", "'banane'", "'3.1415'"),
  type = "checkbox",
  button_label = "Vérifier",
  right = "Les valeurs de 'banane' et de '3.1415' sont entourées de guillemets ce qui indique des valeurs de type caractère.",
  wrong = "N'oubliez pas que les caractères sont entourés de guillemets (simples ou doubles).",
  title = "Lesquelles des valeurs suivantes sont du type caractère?"
)
```

:::

```r
quiz(
  question("Lesquelles des valeurs suivantes sont du type caractère?",
    answer("12.34", message = "12.34 est de type numérique."),
    answer("'banane'", correct = TRUE),
    answer("'3.1415'", correct = TRUE, message = "Les valeurs de `'banane'` et de `'3.1415'` sont entourées de guillemets ce qui indique des valeurs de type caractère."),
    random_answer_order = TRUE,
    allow_retry = TRUE,
    incorrect = "N'oubliez pas que les caractères sont entourés de guillemets (simples ou doubles)."
  ),
  question("Quel est le bon opérateur à utiliser pour assigner une valeur à une variable?",
    answer("<-", correct = TRUE, message = "L'opérateur ` <- ` est recommandé en plus d'éviter la confusion avec l'opérateur logique `==`."),
    answer(" = ", message = "L'opérateur `=` fonctionne, mais il est recommandé d'utiliser ` <- ` pour éviter la confusion avec l'opérateur logique `==`."),
    random_answer_order = TRUE
  ),
  question("Comment peut-on déterminer la classe d'une variable nommée `x`?",
    answer("`class(x)`", correct = TRUE),
    answer("`Class(x)`", message = "Attention à la casse (minuscule ou majuscule) des fonctions."),
    answer("`type(x)`", message = "`type()` n'est pas une fonction de base de R."),
    random_answer_order = TRUE,
    allow_retry = TRUE
  ),
  question("Quels types de variables serait préférables pour représenter les mois d'une année?",
    answer("numeric", message = "Le type `numeric` ne peut pas être utilisé pour les chaînes de caractères."),
    answer("factor", correct = TRUE, message = "Puisque les noms de mois sont fixes, le type `factor` est le meilleur choix. Le type `character` est également valide."),
    answer("logical", message = "Le type `logical` ne peut contenir que les valeurs `TRUE` ou `FALSE`."),
    answer("character", correct = TRUE, message = "Le type `caracter` permet en effet de conserver des chaînes de caractères."),
    random_answer_order = TRUE,
    allow_retry = TRUE,
    incorrect = "Il y a peut-être plus d'une bonne réponse!"
  )
)
```

### Noms de variable

```r
quiz(
  question("Parmi les choix suivants, lesquelles représentent des noms de variables valides en R?",
    answer("1x3", message = "Un nom de variable ne doit pas commencer par une valeur numérique."),
    answer("x2", correct = TRUE, message = "`x2` est valide puisqu'il commence par une lettre, ne contient pas caractères spéciaux et/ou d'espaces."),
    answer("ma variable", message = "Un nom de variable ne doit pas contenir d'espace."),
    answer("température", correct = TRUE, "`température` est techniquement valide, mais il est fortement conseillé d'éviter l'utilisation de caractères spéciaux."),
    random_answer_order = TRUE,
    allow_retry = TRUE
  ),
  question("Parmi les choix suivants, lequel serait le meilleur choix pour exprimer la valeur de déplacement d'une voiture se déplacant à 50 km/h?",
    answer("x <- 50", message = "Le nom de la variable (`x`) n'est pas très descriptif."),
    answer("vitesse_km_h <- 50", correct = TRUE, message = "Ce nom est descriptif en plus d'indiquer les unités."),
    answer("vitesse <- 50", message = "Ce choix n'est pas optimal, car on ne peut pas deviner les unités."),
    random_answer_order = TRUE,
    allow_retry = TRUE
  ),
  question(
    "Pourquoi l'assignation suivante de devrait pas être utilisée? `c <- 23`",
    answer("Parce que `c()` est une fonction de base dans R."),
    answer("Parce que `c` n'est pas suffisamment descriptif."),
    answer("Toutes ces réponses", correct = TRUE, message = "`c()` est la fonction pour cérer un vecteur en plus de ne pas être un nom de variable très descriptif."),
    random_answer_order = FALSE,
    allow_retry = TRUE,
    incorrect = "Attention, il y a peut-être plusieurs réponses vraies!"
  )
)
```

### Les vecteurs

```r
quiz(
  question("Quelle est la classe de `x <- c(1, '2', 3)`?",
    answer("numeric", message = "Utilisez la fonction `class()` pour valider votre choix."),
    answer("vecteur", message = "Utilisez la fonction `class()` pour valider votre choix."),
    answer("charactère", correct = TRUE, message = "Puisqu'il y a une valeur texte dans le vecteur, `'2'`, le vecteur entier est de type `character`."),
    random_answer_order = TRUE,
    allow_retry = TRUE
  ),
  question("Parmi les choix suivants, lesquelles représentent des vecteurs de type `logic`?",
    answer("`c(TRUE, FALSE)`", correct = TRUE),
    answer("`c(VRAI, FAUX)`", message = "R n'utilise généralement pas des noms français."),
    answer("`c(0, 1)`", message = "Stictement parlant, `c(0, 1)` n'est pas `logic`. Essayez les commandes suivantes dans R: (1) `1 == TRUE` et (2) `0 == FALSE`."),
    random_answer_order = TRUE,
    allow_retry = TRUE
  ),
  question("Avec le vecteur suivant: `x <- c(1, 42, 5, 4)`, quelle est la valeur de `x[2]`?",
    answer("1"),
    answer("42", correct = TRUE, message = "42 est la valeur à la position 2 du vecteur `x`."),
    answer("5"),
    answer("4"),
    random_answer_order = TRUE,
    allow_retry = TRUE,
    incorrect = "Incorrect!. N'oubliez pas que le nombre entre les [] indique la position (indice) de la valeur à l'intérieur du vecteur `x`."
  ),
  question("Avec le vecteur suivant: `x <- c(1, 42, 5, 4)`, quelle est la valeur de `x[-2]`?",
    answer("-42"),
    answer("c(1, -42, 5, 4)"),
    answer("c(1, 5, 4)", correct = TRUE, message = "`x[-2]` supprime la valeur à la position 2 du vecteur `x`."),
    random_answer_order = TRUE,
    allow_retry = TRUE,
    incorrect = "Incorrect!, N'oubliez pas qu'un indice négatif à l'intérieur des [] supprime la valeur à cet emplacement."
  )
)
```

## Matériel accompagnateur

### Classes de base

Il existe quatre principales classes de variables dans R que vous devriez connaître sur le bout de vos doigts.

**La classe `numeric`**

La classe `numeric` sert à représenter les nombres (ex.: `1`, `3.14`, `-3324.56`).

```{r}
#| echo: true
12
-1.45
3 + pi
```

**La classe `character`**

La classe `character` sert à représenter les caractères ou les chaînes de caractères. Les chaînes de caractères sont soit entourées de simples `'` ou doubles `"` guillemets.

```{r}
#| echo: true
"banane"
"banane"
```

::: {.callout-important}

R est un langage de programmation dit _case sensitive_. C'est-à-dire que la casse (minuscule/majuscule) des caractères est importante. Ainsi, la chaîne de caractères `banane` est différente de la chaîne de caractères `Banane`.

:::

```{r}
#| echo: true
# Est-ce que les deux chaînes sont identiques?
"banane" == "Banane"
```

**La classe `logic`**

La classe `logic` sert à représenter les valeurs booléennes (VRAI/FAUX). Dans R, les valeurs `logic` sont représentées soit à l'aide des valeurs `TRUE`, `FALSE` ou `T`, `F`. Il est cependant recommandé d'utiliser la forme longue (`TRUE`, `FALSE`).

```{r}
#| echo: true

TRUE
FALSE
```

**La classe `factor`**

La classe `factor` sert à représenter les valeurs lorsqu'on connaît d'avance les différentes possibilités (ex. mois de l'année). Les facteurs sont généralement créés avec la fonction `factor()`.

```{r}
#| echo: true
factor(c("lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi", "dimanche"))
```

On peut utiliser la fonction `class()` pour connaître la classe d'une variable.

```{r}
#| eval: true
#| echo: true
class(1)
class("banane")
class("Banane")
class(factor(123.1))
```

Il est également possible de convertir les classes. Par exemple, on peut convertir une classe `character` en classe `numeric`.

```{r}
#| eval: true
#| echo: true
class("3.4")
class(as.numeric("3.4"))
```

### Noms de variables

Il est souvent fort utile de pouvoir réutiliser les valeurs (numérique, texte ou autre) d'une opération dans d'autres calculs par exemple. Pour ce faire, il faut assigner la valeur à une variable. Dans R, l'assignement d'une valeur à une variable peut se faire à l'aide des opérateurs `<-` et `=`. Cependant, il est préférable d'utiliser l'opérateur `<-` plutôt que `=` pour l'assignation d'une variable. En plus, l'utilisation de `<-` permet d'éviter la confusion avec l'opérateur logique `==`.

```{r}
#| eval: true
#| echo: true
x <- 2 # Assigner la valeur numérique 2 à la variable x
y <- 40 # Assigner la valeur numérique 40 à la variable y
x + y # Somme de x et y
```

Un nom de variable peut contenir à la fois des lettres et des chiffres, mais doit commencer par une lettre.

```{r}
#| eval: false
#| echo: true
# Bon
x123 <- TRUE

# Pas bon
123x <- "R est vraiment trop cool!"
```

Il est important de choisir un nom de variable qui est descriptif. Dans les exemples suivants, on créer une variable pour contenir une valeur de chlorophylle a.

```{r}
#| eval: false
#| echo: true
x <- 200 # x n'est pas assez descriptif
chla <- 200 # mieux, mais on ne connaît pas les unités
chla_mg_m2 <- 200 # idéal, on connaît la variable et son unité
```

Il est important d'être consistent dans la casse des noms de variables. Par exemple, `chla_mg_m2` et `Chla_mg_m2` sont deux variables distinctes.

```{r}
#| eval: false
#| echo: true
chla_mg_m2 <- 200
Chla_mg_m2 <- 200
```

::: {.callout-important}

Il est important que vos noms de variables n'entrent pas en conflit avec des noms de variables ou de fonctions déjà définies dans R. Par exemple, il faut éviter d'utiliser `cos`, `sin`, `min`, `median`, `pi`.

:::

`{r echo=TRUE, eval=FALSE} cos <- 3 # À ne pas faire! `

### Les vecteurs

Les vecteurs sont des tableaux d'éléments successifs. Les éléments d'un vecteur peuvent être, par exemple: `numeric`, `character`, `logic`. Dans R, les vecteurs sont créés à l'aide de la fonction `c()` (qui veut dire _combine_) et les valeurs sont séparées à l'aide de la virgule (`,`).

```{r}
#| eval: true
#| echo: true
# Création d'un vecteur avec 6 valeurs numériques
v1 <- c(100, 101, 102, 103, 104, 105)
v1
```

Pour accéder aux valeurs d'un vecteur, il suffit de spécifier l'index (position) à laquel nous voulons accéder.

```{r}
#| eval: true
#| echo: true
v1[3] # 3ième élément du vecteur v
v1[3:5] # Positions 3,4,5 du vecteur v
```

:::{.callout-important}

Dans R il est possible de créer rapidement une séquence de nombre en utilisant l'opérateur `:`. Par exemple, la commande `3:5` retourne un vecteur numérique avec les valeurs 3, 4 et 5.

:::

Il est également possible de supprimer un élément d'un vecteur en utilisant
l'opérateur `-` suivi de l'index à supprimer.

```{r}
#| eval: true
#| echo: true
v1[-3] # Supprimer le 3ième élément du vecteur v
```

Des opérations arithmétiques sont également possibles avec les vecteurs.

```{r}
#| eval: true
#| echo: true
v1 <- c(100, 101, 102, 103, 104, 105)
v2 <- c(10, 20, 30, 40, 50, 60)
v1 + v2
```

### Autres types de classes

Il existe un très grand nombre d'objets dans R. Ainsi, d'autres classes d'objets vous seront utiles:

- `data.frame`: Format habituel de tableau de données que vous importez.
- `list`: Liste d'objets de classes différentes (texte, numérique, etc.).
- `lm`: Résultat d'une analyse de modèle linéaire.
- `date`: Pour représenter les dates.

Dans l'exemple suivant, un modèle linéaire `model1` est créé avec la fonction `lm()`. Différentes fonctions génériques peuvent être utilisées avec la variable `model1`.

```{r}
#| echo: true
model1 <- lm(mpg ~ hp, data = mtcars) # Créer un modèle linéaire (lm)

class(model1) # Voir la classe de model1

summary(model1) # Diagnostiques du modèle

plot(model1) # Graphiques de diagnostic du modèle
```
